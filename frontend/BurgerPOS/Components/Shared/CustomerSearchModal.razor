@using BurgerPOS.Services
@using BurgerPOS.Models
@inject PosApiService ApiService
@inject IJSRuntime JS
@inject ILogger<CustomerSearchModal> Logger
@rendermode InteractiveServer

<link rel="stylesheet" href="css/components/customer-search-modal.css" />

@if (IsOpen)
{
    <div class="modal-backdrop" @onclick="HandleBackdropClick">
        <div class="modal-search" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h2>üîç Buscar Cliente</h2>
                <button class="btn-close" @onclick="Cancel" type="button">√ó</button>
            </div>

            <div class="modal-body">
                <!-- B√∫squeda por Tel√©fono con Autocompletado -->
                <div class="search-section">
                    <label class="search-label">Tel√©fono del Cliente</label>
                    <div class="search-input-wrapper">
                        <input type="tel"
       class="search-input"
       value="@searchQuery"
       @oninput="OnSearchQueryChanged"
       @onfocus="OnSearchFocus"
       placeholder="Escribe el tel√©fono o nombre..."
       autocomplete="off" />
                        
                        @if (isSearching)
                        {
                            <div class="search-spinner">üîÑ</div>
                        }
                    </div>

                    <!-- Dropdown de Sugerencias -->
                    @if (showSuggestions && suggestions.Any())
                    {
                        <div class="suggestions-dropdown">
                            @foreach (var customer in suggestions)
                            {
                                <div class="suggestion-item" @onclick="() => SelectCustomer(customer)">
                                    <div class="suggestion-icon">üë§</div>
                                    <div class="suggestion-info">
                                        <div class="suggestion-name">@customer.Name</div>
                                        <div class="suggestion-details">
                                            üìû @customer.Phone
                                            @if (!string.IsNullOrEmpty(customer.AddressLine1))
                                            {
                                                <span class="suggestion-separator">‚Ä¢</span>
                                                <span>üìç @customer.AddressLine1, @customer.City</span>
                                            }
                                        </div>
                                        @if (customer.TotalOrders > 0)
                                        {
                                            <div class="suggestion-stats">
                                                üõí @customer.TotalOrders √≥rdenes ‚Ä¢ üí∞ ‚Ç¨@customer.TotalSpent.ToString("F2")
                                            </div>
                                        }
                                    </div>
                                    <div class="suggestion-arrow">‚Üí</div>
                                </div>
                            }
                        </div>
                    }

                    @if (showSuggestions && !suggestions.Any() && !isSearching && !string.IsNullOrEmpty(searchQuery))
                    {
                        <div class="no-results">
                            <div class="no-results-icon">üîç</div>
                            <div class="no-results-text">No se encontraron clientes</div>
                            <button class="btn-create-new" @onclick="ShowCreateForm" type="button">
                                ‚ûï Crear nuevo cliente
                            </button>
                        </div>
                    }
                </div>

                <!-- Cliente Seleccionado -->
                @if (selectedCustomer != null)
                {
                    <div class="selected-customer">
                        <div class="selected-header">
                            <h3>‚úÖ Cliente Seleccionado</h3>
                            <button class="btn-change" @onclick="ClearSelection" type="button">Cambiar</button>
                        </div>
                        
                        <div class="customer-card">
                            <div class="customer-avatar">üë§</div>
                            <div class="customer-info">
                                <div class="customer-name">@selectedCustomer.Name</div>
                                <div class="customer-phone">üìû @selectedCustomer.Phone</div>
                                @if (!string.IsNullOrEmpty(selectedCustomer.Email))
                                {
                                    <div class="customer-email">‚úâÔ∏è @selectedCustomer.Email</div>
                                }
                                @if (!string.IsNullOrEmpty(selectedCustomer.AddressLine1))
                                {
                                    <div class="customer-address">
                                        üìç @selectedCustomer.AddressLine1
                                        @if (!string.IsNullOrEmpty(selectedCustomer.AddressLine2))
                                        {
                                            <span>, @selectedCustomer.AddressLine2</span>
                                        }
                                        <br />
                                        @selectedCustomer.City, @selectedCustomer.County
                                        @if (!string.IsNullOrEmpty(selectedCustomer.Eircode))
                                        {
                                            <span> - @selectedCustomer.Eircode</span>
                                        }
                                    </div>
                                }
                                @if (selectedCustomer.TotalOrders > 0)
                                {
                                    <div class="customer-stats">
                                        <span class="stat-badge">üõí @selectedCustomer.TotalOrders √≥rdenes</span>
                                        <span class="stat-badge">üí∞ ‚Ç¨@selectedCustomer.TotalSpent.ToString("F2") gastado</span>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Elegir Tipo de Orden -->
                        <div class="order-type-section">
                            <h4>Tipo de Orden</h4>
                            <div class="order-type-buttons">
                                <button class="order-type-btn delivery @(orderType == "delivery" ? "selected" : "")" 
                                        @onclick='() => orderType = "delivery"' 
                                        type="button">
                                    <span class="order-type-icon">üöó</span>
                                    <span class="order-type-label">Delivery</span>
                                </button>
                                <button class="order-type-btn takeout @(orderType == "takeout" ? "selected" : "")" 
                                        @onclick='() => orderType = "takeout"' 
                                        type="button">
                                    <span class="order-type-icon">ü•°</span>
                                    <span class="order-type-label">Para Llevar</span>
                                </button>
                            </div>
                        </div>
                    </div>
                }

                <!-- Formulario para Crear Nuevo Cliente -->
                @if (showCreateForm)
                {
                    <div class="create-form-section">
                        <div class="create-form-header">
                            <h3>‚ûï Crear Nuevo Cliente</h3>
                            <button class="btn-back" @onclick="HideCreateForm" type="button">‚Üê Volver a Buscar</button>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(createErrorMessage))
                        {
                            <div class="alert alert-error">
                                <strong>Error:</strong> @createErrorMessage
                            </div>
                        }
                        
                        <!-- Formulario completo -->
                        <div class="simple-form">
                            <div class="form-group">
                                <label class="form-label required">Tel√©fono</label>
                                <input type="tel" 
                                       class="form-input" 
                                       @bind="newPhone"
                                       @bind:event="oninput"
                                       placeholder="087 123 4567"
                                       maxlength="15" />
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label required">Nombre Completo</label>
                                <input type="text" 
                                       class="form-input" 
                                       @bind="newName"
                                       @bind:event="oninput"
                                       placeholder="John Doe" />
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Email</label>
                                <input type="email" 
                                       class="form-input" 
                                       @bind="newEmail"
                                       @bind:event="oninput"
                                       placeholder="cliente@ejemplo.com" />
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Eircode</label>
                                <div class="input-group">
                                    <input type="text" 
                                           class="form-input" 
                                           @bind="newEircode"
                                           @bind:event="oninput"
                                           placeholder="A92 D65P"
                                           maxlength="8"
                                           style="text-transform: uppercase;" />
                                    <button class="btn-search" 
                                            @onclick="SearchNewCustomerAddress" 
                                            type="button"
                                            disabled="@isSearchingNewAddress">
                                        @(isSearchingNewAddress ? "üîÑ" : "üîç") Buscar
                                    </button>
                                </div>
                                <small class="form-hint">Ingresa el Eircode para autocompletar la direcci√≥n</small>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Direcci√≥n</label>
                                <input type="text" 
                                       class="form-input" 
                                       @bind="newAddress"
                                       @bind:event="oninput"
                                       placeholder="123 Main Street" />
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Apartamento / Piso (opcional)</label>
                                <input type="text" 
                                       class="form-input" 
                                       @bind="newAddressLine2"
                                       @bind:event="oninput"
                                       placeholder="Apt 4B" />
                            </div>
                            
                            <div class="form-row">
                                <div class="form-group">
                                    <label class="form-label">Ciudad</label>
                                    <input type="text" 
                                           class="form-input" 
                                           @bind="newCity"
                                           @bind:event="oninput"
                                           placeholder="Drogheda" />
                                </div>
                                
                                <div class="form-group">
                                    <label class="form-label">County</label>
                                    <input type="text" 
                                           class="form-input" 
                                           @bind="newCounty"
                                           @bind:event="oninput"
                                           placeholder="Louth" />
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Notas</label>
                                <textarea class="form-textarea" 
                                          @bind="newNotes"
                                          @bind:event="oninput"
                                          rows="2"
                                          placeholder="Instrucciones especiales..."></textarea>
                            </div>
                            
                            @if (newLatitude.HasValue && newLongitude.HasValue)
                            {
                                <div class="location-indicator">
                                    üìç Ubicaci√≥n: @newLatitude.Value.ToString("F6"), @newLongitude.Value.ToString("F6")
                                </div>
                            }
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-error">
                        <strong>Error:</strong> @errorMessage
                    </div>
                }
            </div>

            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="Cancel" type="button">
                    Cancelar
                </button>
                
                @if (showCreateForm)
                {
                    <button class="btn btn-primary" 
                            @onclick="CreateAndContinue" 
                            type="button"
                            disabled="@(!IsNewCustomerValid() || isSaving)">
                        @(isSaving ? "Creando..." : "Crear y Continuar")
                    </button>
                }
                else if (selectedCustomer != null)
                {
                    <button class="btn btn-primary btn-large" 
                            @onclick="ContinueWithOrder" 
                            type="button"
                            disabled="@(string.IsNullOrEmpty(orderType))">
                        Continuar con la Orden ‚Üí
                    </button>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback<(Customer customer, string orderType)> OnContinue { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private string searchQuery = "";
    private List<Customer> suggestions = new();
    private Customer? selectedCustomer = null;
    private string orderType = "";
    private bool showSuggestions = false;
    private bool isSearching = false;
    private bool showCreateForm = false;
    private bool isSaving = false;
    private string errorMessage = "";
    private bool _wasOpen = false;
    private bool isInitialRender = true;
    private System.Threading.Timer? searchTimer;

    // Datos para nuevo cliente
    private string newPhone = "";
    private string newName = "";
    private string newAddress = "";
    private string newCity = "Drogheda";
    private string newEmail = "";
private string newEircode = "";
private string newAddressLine2 = "";
private string newCounty = "Louth";
private string newNotes = "";
private double? newLatitude = null;
private double? newLongitude = null;
private bool isSearchingNewAddress = false;
private string createErrorMessage = "";

    protected override void OnParametersSet()
    {
        if (IsOpen && !_wasOpen)
        {
            Logger.LogInformation("üÜï Modal de b√∫squeda abierto");
            ResetModal();
            isInitialRender = true;
            Task.Delay(300).ContinueWith(_ => isInitialRender = false);
        }
        else if (!IsOpen && _wasOpen)
        {
            Logger.LogInformation("üîí Modal cerrado");
        }
        
        _wasOpen = IsOpen;
    }

    private void ResetModal()
    {
        searchQuery = "";
        suggestions.Clear();
        selectedCustomer = null;
        orderType = "";
        showSuggestions = false;
        showCreateForm = false;
        errorMessage = "";
        newPhone = "";
        newName = "";
        newAddress = "";
        newCity = "Drogheda";
    }

    

    private void OnSearchFocus()
    {
        if (!string.IsNullOrWhiteSpace(searchQuery) && suggestions.Any())
        {
            showSuggestions = true;
        }
    }

    private async Task OnSearchQueryChanged(ChangeEventArgs e)
{
    searchQuery = e.Value?.ToString() ?? "";
    
    // Cancelar b√∫squeda anterior
    searchTimer?.Dispose();
    
    if (string.IsNullOrWhiteSpace(searchQuery) || searchQuery.Length < 2)
    {
        suggestions.Clear();
        showSuggestions = false;
        StateHasChanged();
        return;
    }
    
    isSearching = true;
    showSuggestions = true;
    StateHasChanged();
    
    // Debounce: esperar 300ms antes de buscar
    searchTimer = new System.Threading.Timer(async _ =>
    {
        await SearchCustomers(searchQuery);
    }, null, 300, Timeout.Infinite);
}

    private async Task SearchCustomers(string query)
    {
        try
        {
            Logger.LogInformation("üîç Buscando clientes: {Query}", query);
            
            var results = await ApiService.SearchCustomersAsync(query);
            
            await InvokeAsync(() =>
            {
                suggestions = results ?? new List<Customer>();
                isSearching = false;
                StateHasChanged();
            });
            
            Logger.LogInformation("‚úÖ Encontrados {Count} clientes", suggestions.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error buscando clientes");
            await InvokeAsync(() =>
            {
                isSearching = false;
                StateHasChanged();
            });
        }
    }

    private void SelectCustomer(Customer customer)
    {
        Logger.LogInformation("‚úÖ Cliente seleccionado: {Name}", customer.Name);
        selectedCustomer = customer;
        showSuggestions = false;
        searchQuery = customer.Phone;
        StateHasChanged();
    }

    private void ClearSelection()
    {
        selectedCustomer = null;
        orderType = "";
        searchQuery = "";
        StateHasChanged();
    }

    private void ShowCreateForm()
    {
        showCreateForm = true;
        showSuggestions = false;
        newPhone = searchQuery;
        StateHasChanged();
    }

    private void HideCreateForm()
    {
        showCreateForm = false;
        StateHasChanged();
    }

    private bool IsNewCustomerValid()
    {
        return !string.IsNullOrWhiteSpace(newPhone) && 
               newPhone.Length >= 9 &&
               !string.IsNullOrWhiteSpace(newName);
    }

    private async Task CreateAndContinue()
    {
        if (!IsNewCustomerValid()) return;

        isSaving = true;
        errorMessage = "";
        StateHasChanged();

        try
        {
            var customerData = new CustomerCreate
            {
                Phone = newPhone.Trim(),
                Name = newName.Trim(),
                Email = null,
                AddressLine1 = string.IsNullOrWhiteSpace(newAddress) ? null : newAddress.Trim(),
                AddressLine2 = null,
                City = newCity.Trim(),
                County = "Louth",
                Eircode = null,
                Latitude = null,
                Longitude = null,
                Notes = null
            };

            var result = await ApiService.CreateCustomerAsync(customerData);

            if (result != null)
            {
                selectedCustomer = result;
                showCreateForm = false;
                Logger.LogInformation("‚úÖ Cliente creado: {Name}", result.Name);
            }
            else
            {
                errorMessage = "Error al crear el cliente";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creando cliente");
            errorMessage = "Error al crear: " + ex.Message;
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task SearchNewCustomerAddress()
{
    if (string.IsNullOrWhiteSpace(newEircode))
    {
        createErrorMessage = "Por favor ingresa un Eircode";
        StateHasChanged();
        return;
    }

    isSearchingNewAddress = true;
    createErrorMessage = "";
    StateHasChanged();

    try
    {
        Logger.LogInformation("üîç Buscando direcci√≥n para Eircode: {Eircode}", newEircode);
        
        // ESTA L√çNEA ES CR√çTICA - debe llamar a la funci√≥n JavaScript
        await JS.InvokeVoidAsync("searchAddressByEircode", newEircode, 
            DotNetObjectReference.Create(this));
    }
    catch (Exception ex)
    {
        Logger.LogError(ex, "Error buscando direcci√≥n");
        createErrorMessage = "Error al buscar la direcci√≥n: " + ex.Message;
        isSearchingNewAddress = false;
        StateHasChanged();
    }
}

    private async Task ContinueWithOrder()
    {
        if (selectedCustomer == null || string.IsNullOrEmpty(orderType)) return;

        Logger.LogInformation("üöÄ Continuando con orden - Cliente: {Name}, Tipo: {Type}", 
            selectedCustomer.Name, orderType);

        await OnContinue.InvokeAsync((selectedCustomer, orderType));
    }

    private void HandleBackdropClick()
    {
        if (!isInitialRender)
        {
            Cancel();
        }
    }

    private async Task Cancel()
    {
        Logger.LogInformation("üö´ Cancelando b√∫squeda de cliente");
        ResetModal();
        await OnCancel.InvokeAsync();
    }

    public void Dispose()
    {
        searchTimer?.Dispose();
    }

    [JSInvokable]
public void OnAddressFound(string addressLine, string cityResult, double lat, double lng)
{
    Logger.LogInformation("‚úÖ Direcci√≥n recibida de JavaScript - Direcci√≥n: {Address}, Ciudad: {City}, Coordenadas: ({Lat}, {Lng})", 
        addressLine, cityResult, lat, lng);
    
    newAddress = addressLine;
    newCity = cityResult;
    newLatitude = lat;
    newLongitude = lng;
    isSearchingNewAddress = false;
    createErrorMessage = ""; // Limpiar errores previos
    
    StateHasChanged();
    
    Logger.LogInformation("‚úÖ Campos actualizados en el modal");
}

[JSInvokable]
public void OnAddressError(string error)
{
    Logger.LogError("‚ùå Error desde JavaScript: {Error}", error);
    createErrorMessage = error;
    isSearchingNewAddress = false;
    StateHasChanged();
}
}